https://florencefennel1-my.sharepoint.com/:f:/g/personal/pradeep_banda_florencefennel_co_in/Eg5BT1bbEWlNsmNET_BoMvwBub91j7TeRddVLZMsUvmA4Q?e=tlA7eA


1.Create rest api with CRUD operations.
Create product.json file with following structure 
{
    "products": [
      { "id": 101, "name": "Mobile", "make": "Apple "  , "qty": 100, "price": 11999.99  },
      { "id": 102, "name": "Laptop", " make ": "HP", "qty": 200, "price": 89999.99   },
    { "id": 103, "name": "Tab", " make ": "Samsung", "qty": 150, "price": 29999.99   }
    ]
  }
  
Use json server to load product.json file to load products data.
Write Node js rest application with following endpoints(url)
Post   -  /product       -add new  product
Get    -/products     - get all products
Get   -/product/:id   - get one prodcuct details for given id
Put  -/product/:id    -update product details  to change qty, price etc
Delete -/product/:id to delate given product

Use async and await , axios ,express middleware to connect to json file through http methods. Test all above urls in postman.

Need to upload .js files and screenshots of  api tester  for all crud operations. And upload zip file with your name in the below Here’s a guide to creating a Node.js REST API using JSON Server, Express, and Axios to perform CRUD operations.

Step 1: Setup the Project

	1.	Initialize a Node.js project:

mkdir productAPI
cd productAPI
npm init -y


	2.	Install the required packages:

npm install express axios json-server



Step 2: Create product.json

Create a product.json file with the given structure:

{
  "products": [
    { "id": 101, "name": "Mobile", "make": "Apple", "qty": 100, "price": 11999.99 },
    { "id": 102, "name": "Laptop", "make": "HP", "qty": 200, "price": 89999.99 },
    { "id": 103, "name": "Tab", "make": "Samsung", "qty": 150, "price": 29999.99 }
  ]
}

Step 3: Set Up JSON Server

Add a script in package.json to start JSON Server:

"scripts": {
  "json-server": "json-server --watch product.json --port 3000"
}

Run JSON Server to serve the product.json file:

npm run json-server

Step 4: Create server.js

This file will contain the Express application with CRUD endpoints. Use async/await and Axios to connect to the JSON Server API.

const express = require('express');
const axios = require('axios');
const app = express();
app.use(express.json());

const JSON_SERVER_URL = 'http://localhost:3000/products';

// Add a new product
app.post('/product', async (req, res) => {
  try {
    const response = await axios.post(JSON_SERVER_URL, req.body);
    res.status(201).json(response.data);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all products
app.get('/products', async (req, res) => {
  try {
    const response = await axios.get(JSON_SERVER_URL);
    res.json(response.data);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get one product by ID
app.get('/product/:id', async (req, res) => {
  try {
    const response = await axios.get(`${JSON_SERVER_URL}/${req.params.id}`);
    res.json(response.data);
  } catch (error) {
    res.status(404).json({ message: 'Product not found' });
  }
});

// Update a product by ID
app.put('/product/:id', async (req, res) => {
  try {
    const response = await axios.put(`${JSON_SERVER_URL}/${req.params.id}`, req.body);
    res.json(response.data);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Delete a product by ID
app.delete('/product/:id', async (req, res) => {
  try {
    await axios.delete(`${JSON_SERVER_URL}/${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    res.status(404).json({ message: 'Product not found' });
  }
});

const PORT = 3001;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

Step 5: Test with Postman

	1.	POST /product - Add a new product.
	2.	GET /products - Retrieve all products.
	3.	GET /product/:id - Retrieve a product by ID.
	4.	PUT /product/:id - Update a product’s details by ID.
	5.	DELETE /product/:id - Delete a product by ID.

Step 6: Upload Files

	1.	Save server.js, product.json, and your screenshots in a folder.
	2.	Zip the folder.
	3.	Upload the zip file to the provided link.

Let me know if you need further assistance with any part of the process.




