Let’s complete the remaining components and integrate everything into your app. This includes the Booking Component, PNR generation, and an optional Receipt Component.

Step 8: Build the Booking Component

1. Create the Booking Component File

	1.	Inside the src/components folder, create a file named Booking.js.
	2.	Add the following code to handle passenger input and booking submission:

import React, { useState } from 'react';

const Booking = ({ flight, onSubmit, onCancel }) => {
  const [passengers, setPassengers] = useState([]);

  // Dynamically create input fields for passenger names
  const handlePassengerChange = (index, value) => {
    const updatedPassengers = [...passengers];
    updatedPassengers[index] = value;
    setPassengers(updatedPassengers);
  };

  const handleSubmit = () => {
    if (passengers.length !== flight.passengers) {
      alert(`Please enter names for all ${flight.passengers} passengers.`);
      return;
    }
    onSubmit({ flight, passengers });
  };

  return (
    <div>
      <h2>Booking for {flight.source} → {flight.destination}</h2>
      <p>Date: {flight.date}</p>
      <p>Price: ${flight.price} per passenger</p>

      <h3>Enter Passenger Names:</h3>
      {[...Array(flight.passengers)].map((_, index) => (
        <input
          key={index}
          placeholder={`Passenger ${index + 1} Name`}
          onChange={(e) => handlePassengerChange(index, e.target.value)}
        />
      ))}

      <button onClick={handleSubmit}>Submit Booking</button>
      <button onClick={onCancel}>Cancel</button>
    </div>
  );
};

export default Booking;

Step 9: Integrate Booking into the App

	1.	Update the App.js file to include the Booking component and manage booking submission:

import React, { useState } from 'react';
import Home from './components/Home';
import FlightListing from './components/FlightListing';
import Booking from './components/Booking';

function App() {
  const [currentPage, setCurrentPage] = useState('home');
  const [flights, setFlights] = useState([]);
  const [selectedFlight, setSelectedFlight] = useState(null);
  const [bookingDetails, setBookingDetails] = useState(null);

  const handleSearch = async (formData) => {
    try {
      const response = await fetch('http://localhost:5000/flights', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });
      const data = await response.json();
      setFlights(data);
      setCurrentPage('listing');
    } catch (error) {
      console.error('Error fetching flights:', error);
    }
  };

  const handleBook = (flight) => {
    setSelectedFlight({ ...flight, passengers: flight.passengers || 1 });
    setCurrentPage('booking');
  };

  const handleSubmitBooking = async (bookingData) => {
    try {
      const response = await fetch('http://localhost:5000/booking', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(bookingData),
      });
      const data = await response.json();
      setBookingDetails(data);
      alert(`Booking Confirmed! Your PNR: ${data.pnr}`);
      setCurrentPage('home');
    } catch (error) {
      console.error('Error booking flight:', error);
    }
  };

  const handleBackToHome = () => {
    setCurrentPage('home');
  };

  return (
    <div>
      {currentPage === 'home' && <Home onSearch={handleSearch} />}
      {currentPage === 'listing' && (
        <FlightListing flights={flights} onBook={handleBook} onBack={handleBackToHome} />
      )}
      {currentPage === 'booking' && (
        <Booking
          flight={selectedFlight}
          onSubmit={handleSubmitBooking}
          onCancel={handleBackToHome}
        />
      )}
    </div>
  );
}

export default App;

Step 10: Backend API for Booking

	1.	Update the server.js file to handle bookings and generate a PNR:

const bookings = [];

const generatePNR = () => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let pnr = '';
  for (let i = 0; i < 6; i++) {
    pnr += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return pnr;
};

app.post('/booking', (req, res) => {
  const { flight, passengers } = req.body;
  const pnr = generatePNR();

  const booking = {
    pnr,
    flight,
    passengers,
    totalPrice: passengers.length * flight.price,
  };

  bookings.push(booking);
  res.json(booking);
});

Step 11: Optional Receipt Component

	1.	Create a new file named Receipt.js:

import React from 'react';

const Receipt = ({ booking }) => {
  if (!booking) return null;

  return (
    <div>
      <h2>Booking Receipt</h2>
      <p>PNR: {booking.pnr}</p>
      <p>Flight: {booking.flight.source} → {booking.flight.destination}</p>
      <p>Date: {booking.flight.date}</p>
      <p>Total Price: ${booking.totalPrice}</p>
      <h3>Passengers:</h3>
      <ul>
        {booking.passengers.map((name, index) => (
          <li key={index}>{name}</li>
        ))}
      </ul>
    </div>
  );
};

export default Receipt;


	2.	Update App.js to show the receipt:

import Receipt from './components/Receipt';

// Add this below the bookingDetails state:
const [showReceipt, setShowReceipt] = useState(false);

const handleShowReceipt = () => {
  setShowReceipt(true);
};

// Modify the `return` to include the Receipt:
{showReceipt && <Receipt booking={bookingDetails} />}

Step 12: Test the App

	1.	Start the backend:

node backend/server.js


	2.	Start the React frontend:

npm start


	3.	Workflow:
	•	Search flights.
	•	Select a flight to book.
	•	Enter passenger details.
	•	Confirm booking and see the PNR.
	•	Optionally view the receipt.

Let me know if you encounter any issues!