import logging
import azure.functions as func
from azure.cosmos import CosmosClient, exceptions
import os

def copy_items(source_container, dest_container, container_name):
    """Copy all items from source to destination container"""
    items = list(source_container.read_all_items())
    copied_count = 0
    
    for item in items:
        try:
            # Remove system properties
            for prop in ['_rid', '_self', '_etag', '_attachments', '_ts']:
                item.pop(prop, None)
            
            dest_container.create_item(body=item)
            copied_count += 1
            
            if copied_count % 100 == 0:  # Log progress
                logging.info(f"Copied {copied_count} items in container {container_name}")
                
        except Exception as e:
            logging.error(f"Error copying item in {container_name}: {str(e)}")
    
    return copied_count

def copy_stored_procedures(source_container, dest_container, container_name):
    """Copy stored procedures"""
    count = 0
    for proc in source_container.scripts.list_stored_procedures():
        try:
            body = source_container.scripts.get_stored_procedure(proc['id'])
            dest_container.scripts.create_stored_procedure(body=body)
            count += 1
        except Exception as e:
            logging.error(f"Error copying stored procedure in {container_name}: {str(e)}")
    return count

def copy_triggers(source_container, dest_container, container_name):
    """Copy triggers"""
    count = 0
    for trigger in source_container.scripts.list_triggers():
        try:
            body = source_container.scripts.get_trigger(trigger['id'])
            dest_container.scripts.create_trigger(body=body)
            count += 1
        except Exception as e:
            logging.error(f"Error copying trigger in {container_name}: {str(e)}")
    return count

def copy_udfs(source_container, dest_container, container_name):
    """Copy user defined functions"""
    count = 0
    for udf in source_container.scripts.list_user_defined_functions():
        try:
            body = source_container.scripts.get_user_defined_function(udf['id'])
            dest_container.scripts.create_user_defined_function(body=body)
            count += 1
        except Exception as e:
            logging.error(f"Error copying UDF in {container_name}: {str(e)}")
    return count

def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Starting full database copy process...')
    
    try:
        # Source (MLOPS) connection
        source_client = CosmosClient(
            os.environ["MLOPS_COSMOS_ENDPOINT"],
            os.environ["MLOPS_COSMOS_KEY"]
        )
        source_db_name = os.environ["MLOPS_DATABASE_NAME"]
        source_db = source_client.get_database_client(source_db_name)
        logging.info(f"Connected to source database: {source_db_name}")
        
        # Destination (XOPS) connection
        dest_client = CosmosClient(
            os.environ["DEST_COSMOS_ENDPOINT"],
            os.environ["DEST_COSMOS_KEY"]
        )
        
        # Create the destination database if it doesn't exist
        dest_db_name = os.environ["DEST_DATABASE_NAME"]
        
        # Check if database exists, if not create it
        database_list = list(dest_client.list_databases())
        database_exists = any(db['id'] == dest_db_name for db in database_list)
        
        if not database_exists:
            logging.info(f"Creating destination database: {dest_db_name}")
            try:
                dest_db = dest_client.create_database(id=dest_db_name)
                logging.info(f"Created destination database: {dest_db_name}")
            except Exception as e:
                logging.error(f"Error creating database {dest_db_name}: {str(e)}")
                raise
        else:
            logging.info(f"Database {dest_db_name} already exists")
            dest_db = dest_client.get_database_client(dest_db_name)
        
        logging.info(f"Connected to destination database: {dest_db_name}")
        
        # Get list of containers
        containers = list(source_db.list_containers())
        logging.info(f"Found {len(containers)} containers to copy")
        
        summary = []
        
        # Copy each container
        for container_info in containers:
            container_name = container_info['id']
            logging.info(f"Processing container: {container_name}")
            
            # Get source container
            source_container = source_db.get_container_client(container_name)
            
            try:
                # Create destination container
                dest_container = dest_db.create_container(
                    id=container_name,
                    partition_key=container_info['partitionKey'],
                    indexing_policy=container_info.get('indexingPolicy'),
                    default_ttl=container_info.get('defaultTtl')
                )
                logging.info(f"Created container: {container_name}")
            except exceptions.CosmosResourceExistsError:
                logging.info(f"Container {container_name} already exists")
                dest_container = dest_db.get_container_client(container_name)
            
            # Copy components
            items_count = copy_items(source_container, dest_container, container_name)
            sprocs_count = copy_stored_procedures(source_container, dest_container, container_name)
            triggers_count = copy_triggers(source_container, dest_container, container_name)
            udfs_count = copy_udfs(source_container, dest_container, container_name)
            
            summary.append({
                'container': container_name,
                'items_copied': items_count,
                'stored_procedures': sprocs_count,
                'triggers': triggers_count,
                'udfs': udfs_count
            })
            
            logging.info(f"Completed container {container_name}")
        
        result_message = "Database copy completed:\n"
        for s in summary:
            result_message += f"\nContainer: {s['container']}\n"
            result_message += f"- Items copied: {s['items_copied']}\n"
            result_message += f"- Stored procedures: {s['stored_procedures']}\n"
            result_message += f"- Triggers: {s['triggers']}\n"
            result_message += f"- UDFs: {s['udfs']}\n"
        
        return func.HttpResponse(
            body=result_message,
            status_code=200
        )
        
    except Exception as e:
        error_msg = f"Error in database copy process: {str(e)}"
        logging.error(error_msg)
        return func.HttpResponse(
            body=error_msg,
            status_code=500
        )
